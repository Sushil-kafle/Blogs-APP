name: release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  detect-changes:
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, backend]
    outputs:
      backend1: ${{ steps.filter.outputs.backend1 }}
      backend2: ${{ steps.filter.outputs.backend2 }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Previous Commit
        id: prev-commit
        run: echo "PREV_COMMIT=$(git rev-parse HEAD^1)" >> $GITHUB_ENV

      - name: Detect Changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          base: ${{ env.PREV_COMMIT }}
          filters: |
            backend1:
              - 'backend1/**'
            backend2:
              - 'backend2/**'
            frontend:
              - 'frontend/**'
  release-backend1:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend1 == 'true'
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, backend]
    defaults:
      run:
        working-directory: backend1
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: yarn
          cache-dependency-path: backend1/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run semantic-release
        id: release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
  build-and-push-backend1:
    needs: release-backend1
    if: needs.detect-changes.outputs.backend1 == 'true'
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, backend]
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v5
        with:
          context: backend1
          file: backend1/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/backend1:${{ needs.release-backend1.outputs.version }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/backend1:latest
          cache-from: type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/backend1:buildcache
          cache-to: type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/backend1:buildcache,mode=max

  release-backend2:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend2 == 'true'
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, backend]
    defaults:
      run:
        working-directory: backend2
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: yarn
          cache-dependency-path: backend2/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run semantic-release
        id: release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
  build-and-push-backend2:
    needs: release-backend2
    if: needs.detect-changes.outputs.backend2 == 'true'
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, backend]
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v5
        with:
          context: backend2
          file: backend2/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/backend2:${{ needs.release-backend2.outputs.version }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/backend2:latest
          cache-from: type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/backend2:buildcache
          cache-to: type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/backend2:buildcache,mode=max

  release-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, backend]
    defaults:
      run:
        working-directory: frontend
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: yarn
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run semantic-release
        id: release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
  build-and-push-frontend:
    needs: release-frontend
    if: needs.detect-changes.outputs.frontend == 'true'
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, backend]
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/frontend:${{ needs.release-frontend.outputs.version }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/frontend:latest
          cache-from: type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/frontend:buildcache
          cache-to: type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/frontend:buildcache,mode=max
